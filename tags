!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
_GLOBAL__sub_I__ZN4node9get_valueEv	searching.s	/^_GLOBAL__sub_I__ZN4node9get_valueEv:$/;"	l
_Z13breadth_firstP10queue_itemP4node	searching.s	/^_Z13breadth_firstP10queue_itemP4node:$/;"	l
_Z15breadth_checkerP10queue_item	searching.s	/^_Z15breadth_checkerP10queue_item:$/;"	l
_Z41__static_initialization_and_destruction_0ii	searching.s	/^_Z41__static_initialization_and_destruction_0ii:$/;"	l
_ZN10queue_item6appendEP4node	searching.s	/^_ZN10queue_item6appendEP4node:$/;"	l
_ZN10queue_itemC2EP4node	searching.s	/^_ZN10queue_itemC2EP4node:$/;"	l
_ZN4node11depth_firstEv	searching.s	/^_ZN4node11depth_firstEv:$/;"	l
_ZN4node11extend_treeEv	searching.s	/^_ZN4node11extend_treeEv:$/;"	l
_ZN4node13generate_treeEi	searching.s	/^_ZN4node13generate_treeEi:$/;"	l
_ZN4node9get_valueEv	searching.s	/^_ZN4node9get_valueEv:$/;"	l
_ZN4nodeC2EiPS_	searching.s	/^_ZN4nodeC2EiPS_:$/;"	l
_ZStL19piecewise_construct	searching.s	/^_ZStL19piecewise_construct:$/;"	l
append	searching.cpp	/^	void append(node* value){$/;"	f	class:queue_item
append	searching2.cpp	/^	void append(node* value){$/;"	f	class:queue_item
birthday	assignments/birthday.cpp	/^		int birthday;$/;"	m	class:person	file:
boundary	connect_four/main.cpp	/^int boundary(int* y_pos, int* x_pos, int matrix_pos[2], int maxy, int maxx){$/;"	f
breadth_checker	searching.cpp	/^queue_item* breadth_checker(queue_item* current_item){$/;"	f
breadth_checker	searching2.cpp	/^queue_item* breadth_checker(queue_item* current_item){$/;"	f
breadth_first	searching.cpp	/^int breadth_first(queue_item* first_item, node* root){$/;"	f
breadth_first	searching2.cpp	/^int breadth_first(queue_item* first_item, node* root){$/;"	f
check_board	assignments/queens_are_safe.cpp	/^int check_board(list<list<int>> positions, int dims[2]){$/;"	f
check_board	assignments/wtf.cpp	/^int check_board(list<int[2]> positions){$/;"	f
depth_first	searching.cpp	/^int node::depth_first(){$/;"	f	class:node
depth_first	searching2.cpp	/^int node::depth_first(){$/;"	f	class:node
end_listen	connect_four/main.cpp	/^bool end_listen(int* y_pos, int* x_pos){$/;"	f
extend_tree	searching.cpp	/^void node::extend_tree(){	$/;"	f	class:node
extend_tree	searching2.cpp	/^void node::extend_tree(){	$/;"	f	class:node
generate_tree	searching.cpp	/^void node::generate_tree(int depth){$/;"	f	class:node
generate_tree	searching2.cpp	/^void node::generate_tree(int depth){$/;"	f	class:node
get	bad_matrix.cpp	/^		int get(int i, int j){$/;"	f	class:matrix_num
get_birthday	assignments/birthday.cpp	/^		int get_birthday(){$/;"	f	class:person
get_dim	assignments/queens_are_safe.cpp	/^int get_dim(list<list<int>> positions, int holder[2]){$/;"	f
get_dim	assignments/wtf.cpp	/^int get_dim(list<list<int>> positions, int holder[2]){$/;"	f
get_name	assignments/birthday.cpp	/^		string get_name(){$/;"	f	class:person
get_pointer	better_matrix.cpp	/^		float* get_pointer(int i, int j){$/;"	f	class:matrix
get_size	sorting_testing/selection.cpp	/^void get_size(int* n){$/;"	f
get_value	better_matrix.cpp	/^		float get_value(int i, int j){$/;"	f	class:matrix
get_value	searching.cpp	/^int node::get_value(){$/;"	f	class:node
get_value	searching2.cpp	/^int node::get_value(){$/;"	f	class:node
get_vowels	assignments/most_vowels.cpp	/^int get_vowels(string input){$/;"	f
initialize_board	connect_four/main.cpp	/^void initialize_board(int board[6][7]){$/;"	f
is_last	bad_matrix.cpp	/^		bool is_last;$/;"	m	class:matrix_num	file:
left	searching.cpp	/^		node* left;$/;"	m	class:node	file:
left	searching2.cpp	/^		node* left;$/;"	m	class:node	file:
listen	connect_four/main.cpp	/^bool listen(int* y_pos, int* x_pos, int* player, int board[6][7], int matrix_pos[2]){$/;"	f
m	better_matrix.cpp	/^		int m;$/;"	m	class:matrix	file:
main	assignments/array_of_arrays.cpp	/^int main(){$/;"	f
main	assignments/birthday.cpp	/^int main(){$/;"	f
main	assignments/hamming.cpp	/^int main(){$/;"	f
main	assignments/is_permutation.cpp	/^int main(){$/;"	f
main	assignments/most_vowels.cpp	/^int main(){$/;"	f
main	assignments/queens_are_safe.cpp	/^int main(){$/;"	f
main	assignments/wtf.cpp	/^int main(){$/;"	f
main	bad_matrix.cpp	/^int main(){$/;"	f
main	connect_four/main.cpp	/^int main(){$/;"	f
main	hello.cpp	/^int main(){$/;"	f
main	matrix_testing.cpp	/^int main(){$/;"	f
main	memory_leak_testing/test1.cpp	/^int main(){$/;"	f
main	pointer_testing/test1.cpp	/^int main(){$/;"	f
main	pointer_testing/test2.cpp	/^int main(){$/;"	f
main	pointer_testing/test2point5.cpp	/^int main(){$/;"	f
main	pointer_testing/test3.cpp	/^int main(){$/;"	f
main	pointer_testing/test4.cpp	/^int main(){$/;"	f
main	pointer_testing/test5.cpp	/^int main(){$/;"	f
main	pointer_testing/test6.cpp	/^int main(){$/;"	f
main	pointer_testing/test7.cpp	/^int main(){$/;"	f
main	searching.cpp	/^int main(){$/;"	f
main	searching.s	/^main:$/;"	l
main	searching2.cpp	/^int main(){$/;"	f
main	sorting_testing/selection.cpp	/^int main(){$/;"	f
matrix	better_matrix.cpp	/^		matrix(int m, int n){$/;"	f	class:matrix
matrix	better_matrix.cpp	/^class matrix{$/;"	c	file:
matrix_num	bad_matrix.cpp	/^		matrix_num(int value, int m, int n, bool is_last){$/;"	f	class:matrix_num
matrix_num	bad_matrix.cpp	/^class matrix_num{$/;"	c	file:
matrix_values	better_matrix.cpp	/^		float * matrix_values;$/;"	m	class:matrix	file:
merge_split	sorting_testing/selection.cpp	/^void merge_split(int* set, int n, int* out1, int* out2){$/;"	f
n	better_matrix.cpp	/^		int n;$/;"	m	class:matrix	file:
name	assignments/birthday.cpp	/^		string name;$/;"	m	class:person	file:
new_num	sorting_testing/create_array.py	/^    new_num = random.randint(-5000,10000)$/;"	v
next_item	searching.cpp	/^		queue_item* next_item = NULL;$/;"	m	class:queue_item	file:
next_item	searching2.cpp	/^		queue_item* next_item = NULL;$/;"	m	class:queue_item	file:
next_value	bad_matrix.cpp	/^		matrix_num* next_value;$/;"	m	class:matrix_num	file:
node	searching.cpp	/^	node(int value, node* parent){$/;"	f	class:node
node	searching.cpp	/^class node{$/;"	c	file:
node	searching2.cpp	/^	node(int value, node* parent){$/;"	f	class:node
node	searching2.cpp	/^class node{$/;"	c	file:
num_cols	bad_matrix.cpp	/^		int num_cols;$/;"	m	class:matrix_num	file:
num_rows	bad_matrix.cpp	/^		int num_rows;$/;"	m	class:matrix_num	file:
operator *	better_matrix.cpp	/^		matrix operator *(float scalar){$/;"	f	class:matrix
operator *	better_matrix.cpp	/^		matrix operator *(matrix input){$/;"	f	class:matrix
operator ==	assignments/birthday.cpp	/^		bool operator==(person other){$/;"	f	class:person
parent	searching.cpp	/^		node* parent;$/;"	m	class:node	file:
parent	searching2.cpp	/^		node* parent;$/;"	m	class:node	file:
person	assignments/birthday.cpp	/^		person(string a, int b){$/;"	f	class:person
person	assignments/birthday.cpp	/^class person {$/;"	c	file:
previous_nums	sorting_testing/create_array.py	/^previous_nums = []$/;"	v
print	bad_matrix.cpp	/^		void print(){$/;"	f	class:matrix_num
print	better_matrix.cpp	/^		void print(){$/;"	f	class:matrix
print_array	sorting_testing/selection.cpp	/^void print_array(int* set, int n){$/;"	f
print_board	connect_four/main.cpp	/^int print_board(int y, int x, int board[6][7]){$/;"	f
printc	assignments/myio.h	/^void printc(int n = 1,...){$/;"	f
prints	assignments/myio.h	/^void prints(int n = 1,...){$/;"	f
queue_item	searching.cpp	/^	queue_item(node* value){$/;"	f	class:queue_item
queue_item	searching.cpp	/^class queue_item{$/;"	c	file:
queue_item	searching2.cpp	/^	queue_item(node* value){$/;"	f	class:queue_item
queue_item	searching2.cpp	/^class queue_item{$/;"	c	file:
r_permute	assignments/is_permutation.cpp	/^bool r_permute(vector<int> input_1, vector<int> input_2){$/;"	f
read	assignments/myio.h	/^string read(string message){$/;"	f
read_array	better_matrix.cpp	/^		matrix read_array(float input[]){$/;"	f	class:matrix
read_from_array	bad_matrix.cpp	/^matrix_num read_from_array(int nums[], int m, int n){$/;"	f
read_nums	sorting_testing/selection.cpp	/^void read_nums(int* set, int* n){$/;"	f
right	searching.cpp	/^		node* right;$/;"	m	class:node	file:
right	searching2.cpp	/^		node* right;$/;"	m	class:node	file:
run_test	assignments/birthday.cpp	/^float run_test(int iterations, int people){$/;"	f
sample	assignments/birthday.cpp	/^int sample(int people){$/;"	f
selection_sort	sorting_testing/selection.cpp	/^void selection_sort(int* set, int n){$/;"	f
set_value	better_matrix.cpp	/^		void set_value(int i, int j, float value){$/;"	f	class:matrix
sort_checker	sorting_testing/selection.cpp	/^bool sort_checker(int* set, int n){$/;"	f
start_pointer	bad_matrix.cpp	/^		matrix_num* start_pointer;$/;"	m	class:matrix_num	file:
test	memory_leak_testing/test1.cpp	/^void test(){$/;"	f
turn	connect_four/main.cpp	/^void turn(int y = 0, int x = 0, int player = 1){$/;"	f
turn_swap	connect_four/main.cpp	/^void turn_swap(int* player){$/;"	f
value	bad_matrix.cpp	/^		int value;$/;"	m	class:matrix_num	file:
value	searching.cpp	/^		int value;$/;"	m	class:node	file:
value	searching.cpp	/^		node* value;$/;"	m	class:queue_item	file:
value	searching2.cpp	/^		int value;$/;"	m	class:node	file:
value	searching2.cpp	/^		node* value;$/;"	m	class:queue_item	file:
win_check	connect_four/main.cpp	/^bool win_check(int board[6][7], int player){$/;"	f
win_message	connect_four/main.cpp	/^void win_message(int player, int maxx){$/;"	f
